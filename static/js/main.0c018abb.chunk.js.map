{"version":3,"sources":["Loader/Loader.js","Table/Table1.js","Filter/Filter.js","Pagination/Pagination.js","App.js","serviceWorker.js","index.js"],"names":["className","props","onClick","sortBy","data","map","item","id","key","singer","song","ganre","year","Filter","handleChangeGanre","event","setState","selectedGanre","target","value","wrapperFunction","setSelectedYear","state","selectedYear","arr","comp","e","i","final","indexOf","filter","this","uniqueYear","getUnique","uniqueCouse","uniqueGanres","uniqueYears","push","sort","onChange","setSelectedGanre","React","Component","Pagination","postsPerPage","totalPosts","paginate","currentPage","pageNumbers","Math","ceil","number","href","App","isLoading","sortField","rowsToDisplay","filterData","a","b","fetch","response","json","filteredData","indexOfLastPost","indexOfFirstPost","currentRows","slice","Table1","length","pageNumber","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0c018abb.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Loader.css';\r\n\r\n\r\nexport default ()=> <div className=\"lds-ring\"><div></div><div></div><div></div><div></div></div>","import React from 'react';\r\n\r\nexport default props => (\r\n    <table className=\"table\">\r\n        <thead>\r\n            <tr>\r\n                <th onClick={()=>props.sortBy('singer')}>Singer</th>\r\n                <th onClick={()=>props.sortBy('song')}>Song </th>\r\n                <th onClick={()=>props.sortBy('ganre')}>Ganre </th>\r\n                <th onClick={()=>props.sortBy('year')}>Year </th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {props.data.map((item,id) =>(\r\n                <tr key={id}>\r\n                    <td>{item.singer}</td>\r\n                    <td>{item.song}</td>\r\n                    <td>{item.ganre}</td>\r\n                    <td>{item.year}</td>\r\n                </tr>\r\n            ))}\r\n        </tbody>\r\n    </table>\r\n)","import React from 'react';\r\n\r\nexport default class Filter extends React.Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          value: \"\",\r\n          data: this.props.data,\r\n          selectedGanre: \"all\",\r\n          selectedYear: \"all\"\r\n\r\n          \r\n        };\r\n      }\r\n\r\n\r\n  handleChangeGanre = event => {\r\n    this.setState({ selectedGanre: event.target.value });\r\n  };\r\n\r\n  wrapperFunction = (event) => {\r\n    this.props.setSelectedYear(this.state.selectedYear)\r\n    this.setState({ selectedYear: event.target.value });\r\n    \r\n  }\r\n\r\n  getUnique(arr, comp) {\r\n    const unique = arr\r\n      .map(e => e[comp])\r\n\r\n      .map((e, i, final) => final.indexOf(e) === i && i)\r\n\r\n      .filter(e => arr[e])\r\n\r\n      .map(e => arr[e]);\r\n    \r\n    return unique;\r\n  }\r\n\r\n    render(){\r\n\r\n    const data = this.state.data;\r\n    \r\n\r\n    const uniqueYear = this.getUnique(data, \"year\");\r\n    const uniqueCouse = this.getUnique(data, \"ganre\");\r\n    const uniqueGanres = [];\r\n    const uniqueYears = [];\r\n    \r\n    uniqueCouse.map(song => {\r\n      uniqueGanres.push(song.ganre)\r\n    })\r\n    uniqueGanres.sort()\r\n\r\n    uniqueYear.map(song => {\r\n      uniqueYears.push(song.year)\r\n    })\r\n    uniqueYears.sort()\r\n    \r\n\r\n        return (<div className=\"filter\">\r\n                <select className=\"select\"\r\n                  value={this.props.ganre}\r\n                  onChange={event=>this.props.setSelectedGanre(event.target.value)}\r\n                >\r\n                  <option value=\"all\">All</option>\r\n                  {uniqueGanres.map((ganre,id) => (\r\n                    <option key={id} value={ganre}>\r\n                        \r\n                      {ganre}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n\r\n              <select\r\n              className=\"select\"\r\n                  value={this.props.year}\r\n                    onChange={event=>this.props.setSelectedYear(event.target.value)}\r\n                    // onChange={this.setYear}\r\n                >\r\n                  <option value=\"all\">All</option>\r\n                  {uniqueYears.map((year,id) => (\r\n                    <option key={id} value={year}>\r\n                        \r\n                      {year}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}","import React from 'react';\r\n\r\nconst Pagination = ({postsPerPage, totalPosts, paginate, currentPage}) => {\r\n\r\n    const pageNumbers = [];\r\n\r\n    for(let i = 1; i <= Math.ceil(totalPosts/postsPerPage); i++){\r\n        pageNumbers.push(i)\r\n    }\r\n\r\n    return (\r\n        <nav className=\"pagination\">\r\n            {pageNumbers.map(number => (\r\n                <li key={number}>\r\n                    <a className={currentPage == number ? \"active-page\" : null} onClick={()=>paginate(number)} href=\"!#\">{number}</a> \r\n                </li>\r\n            ))}\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Pagination;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Loader from \"./Loader/Loader\";\nimport Table1 from \"./Table/Table1\";\nimport Filter from './Filter/Filter';\nimport Pagination from './Pagination/Pagination';\n\nclass App extends Component {\n  state = {\n    isLoading: true,\n    data: [],\n    sort: \" asc\",\n    sortField: \"singer\",\n    currentPage: 1,\n    rowsToDisplay: 5,\n    selectedGanre: \"all\",\n    selectedYear: \"all\"\n  };\n\n  async componentDidMount() {\n    const response = await fetch(\"./songs.json\");\n    const data = await response.json();\n\n    this.setState({\n      isLoading: false,\n      data\n    });\n  }\n\n  \n\n  setSelectedGanre = ganre => {\n    this.setState({\n      selectedGanre: ganre})\n      // data: this.state.data.filter(song=>(\n      //   song.ganre == ganre\n      // ))\n  }\n\n  setSelectedYear = year => {\n    this.setState({selectedYear: year});\n  }\n\n  filterData = (data, ganre, year)=> {\n    if(ganre==='all'&&year===\"all\"){\n      return data\n    } else if (ganre!=='all'&&year===\"all\"){\n      return data.filter(song=> (\n        song.ganre ==ganre\n      ))\n    } else if(ganre==='all'&&year!==\"all\"){\n      return data.filter(song=> (\n        song.year ==year\n      ))\n    } else if(ganre!=='all'&&year!==\"all\"){\n      return data.filter(song=> (\n        song.year ==year\n      )).filter(song=>(\n        song.ganre==ganre\n      ))\n    }\n  }\n\n  sortBy = (key) =>{\n    this.state.sort === 'asc' ? this.setState({\n      data: this.state.data.sort(function(a,b){\n        \n        if(a[key] < b[key]) return 1;\n        if(a[key] > b[key]) return -1;\n        return 0;\n      }),\n      sort: this.state.sort === 'asc' ? 'desc' : 'asc'\n    }) : this.setState({\n      data: this.state.data.sort(function(a,b){\n        \n        if(a[key] < b[key]) return -1;\n        if(a[key] > b[key]) return 1;\n        return 0;\n      }),\n      sort: this.state.sort === 'asc' ? 'desc' : 'asc'\n    })\n  }\n\n  render() {\n\n    const filteredData = this.filterData(this.state.data, this.state.selectedGanre, this.state.selectedYear);\n    \n    const indexOfLastPost = this.state.currentPage *this.state.rowsToDisplay;\n    const indexOfFirstPost = indexOfLastPost - this.state.rowsToDisplay;\n    const currentRows = filteredData.slice(indexOfFirstPost,indexOfLastPost);\n    \n    const paginate = (pageNumber) => {\n      this.setState({currentPage: pageNumber})\n    }\n\n    return (\n      <div className=\"App\">\n       \n        \n        {this.state.isLoading ? (\n          <Loader />\n        ) : <>\n          <Table1 data={currentRows} sort={this.state.sort} sortBy={this.sortBy}/>\n          <Pagination postsPerPage={this.state.rowsToDisplay} totalPosts={this.state.data.length} paginate={paginate} currentPage={this.state.currentPage}/>\n          <div className=\"page-size\">\n                Songs to show:\n                <span className={this.state.rowsToDisplay ===3 ?'active-button': null} onClick={() => this.setState({ rowsToDisplay: 3 })}>3</span>\n                <span className={this.state.rowsToDisplay ===5 ?'active-button': null} onClick={() => this.setState({ rowsToDisplay: 5 })}>5</span>\n                <span className={this.state.rowsToDisplay ===10 ?'active-button': null} onClick={() => this.setState({ rowsToDisplay: 10 })}>\n                  10\n                </span>\n              </div>\n          \n          <Filter data={this.state.data} setSelectedGanre={this.setSelectedGanre} setSelectedYear={this.setSelectedYear} year={this.state.selectedYear} ganre={this.state.selectedGanre}/>\n        </>}\n        \n      \n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}